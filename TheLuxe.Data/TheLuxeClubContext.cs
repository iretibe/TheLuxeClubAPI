// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using TheLuxe.Entity;

namespace TheLuxe.Data
{
    public partial class TheLuxeClubContext : DbContext
    {
        public virtual DbSet<tblAccount> tblAccount { get; set; }
        public virtual DbSet<tblAccountGroup> tblAccountGroup { get; set; }
        public virtual DbSet<tblAccountType> tblAccountType { get; set; }
        public virtual DbSet<tblAction> tblAction { get; set; }
        public virtual DbSet<tblAllStockValue> tblAllStockValue { get; set; }
        public virtual DbSet<tblAllStockValueTemp> tblAllStockValueTemp { get; set; }
        public virtual DbSet<tblBadDebt> tblBadDebt { get; set; }
        public virtual DbSet<tblBank> tblBank { get; set; }
        public virtual DbSet<tblBankAccount> tblBankAccount { get; set; }
        public virtual DbSet<tblBankBranch> tblBankBranch { get; set; }
        public virtual DbSet<tblBankStatement> tblBankStatement { get; set; }
        public virtual DbSet<tblBankStatementTemp> tblBankStatementTemp { get; set; }
        public virtual DbSet<tblBankTransaction> tblBankTransaction { get; set; }
        public virtual DbSet<tblBankTransactionType> tblBankTransactionType { get; set; }
        public virtual DbSet<tblBankTransfer> tblBankTransfer { get; set; }
        public virtual DbSet<tblCashReport> tblCashReport { get; set; }
        public virtual DbSet<tblCashWithdrawal> tblCashWithdrawal { get; set; }
        public virtual DbSet<tblCategoryGroup> tblCategoryGroup { get; set; }
        public virtual DbSet<tblChef> tblChef { get; set; }
        public virtual DbSet<tblCity> tblCity { get; set; }
        public virtual DbSet<tblCompanyLocation> tblCompanyLocation { get; set; }
        public virtual DbSet<tblCompanyProfile> tblCompanyProfile { get; set; }
        public virtual DbSet<tblComputerLocation> tblComputerLocation { get; set; }
        public virtual DbSet<tblCountry> tblCountry { get; set; }
        public virtual DbSet<tblCreditSalePayment> tblCreditSalePayment { get; set; }
        public virtual DbSet<tblCurrency> tblCurrency { get; set; }
        public virtual DbSet<tblCurrencyRate> tblCurrencyRate { get; set; }
        public virtual DbSet<tblCustomer> tblCustomer { get; set; }
        public virtual DbSet<tblCustomerAccount> tblCustomerAccount { get; set; }
        public virtual DbSet<tblCustomerContactPerson> tblCustomerContactPerson { get; set; }
        public virtual DbSet<tblCustomerStatement> tblCustomerStatement { get; set; }
        public virtual DbSet<tblCustomerStatementTemp> tblCustomerStatementTemp { get; set; }
        public virtual DbSet<tblCustomerType> tblCustomerType { get; set; }
        public virtual DbSet<tblDailyStockLevel> tblDailyStockLevel { get; set; }
        public virtual DbSet<tblDefaultProductPicture> tblDefaultProductPicture { get; set; }
        public virtual DbSet<tblEmployee> tblEmployee { get; set; }
        public virtual DbSet<tblEndOfShift> tblEndOfShift { get; set; }
        public virtual DbSet<tblErrorLog> tblErrorLog { get; set; }
        public virtual DbSet<tblExpenditureType> tblExpenditureType { get; set; }
        public virtual DbSet<tblExpenditureTypeGroup> tblExpenditureTypeGroup { get; set; }
        public virtual DbSet<tblExpense> tblExpense { get; set; }
        public virtual DbSet<tblExpenseDetail> tblExpenseDetail { get; set; }
        public virtual DbSet<tblExpenseType> tblExpenseType { get; set; }
        public virtual DbSet<tblExpenseTypeGroup> tblExpenseTypeGroup { get; set; }
        public virtual DbSet<tblFeature> tblFeature { get; set; }
        public virtual DbSet<tblGender> tblGender { get; set; }
        public virtual DbSet<tblGuaranty> tblGuaranty { get; set; }
        public virtual DbSet<tblLocation> tblLocation { get; set; }
        public virtual DbSet<tblMailDetail> tblMailDetail { get; set; }
        public virtual DbSet<tblMailToSend> tblMailToSend { get; set; }
        public virtual DbSet<tblModule> tblModule { get; set; }
        public virtual DbSet<tblMonthlyOrderSummaryReport> tblMonthlyOrderSummaryReport { get; set; }
        public virtual DbSet<tblMonthlySaleReportByQty> tblMonthlySaleReportByQty { get; set; }
        public virtual DbSet<tblMonthlySaleReportByValue> tblMonthlySaleReportByValue { get; set; }
        public virtual DbSet<tblMostSoldProduct> tblMostSoldProduct { get; set; }
        public virtual DbSet<tblOA> tblOA { get; set; }
        public virtual DbSet<tblOAFK> tblOAFK { get; set; }
        public virtual DbSet<tblOption> tblOption { get; set; }
        public virtual DbSet<tblOptionGroup> tblOptionGroup { get; set; }
        public virtual DbSet<tblOrder> tblOrder { get; set; }
        public virtual DbSet<tblOrderActivity> tblOrderActivity { get; set; }
        public virtual DbSet<tblOrderConfirmation> tblOrderConfirmation { get; set; }
        public virtual DbSet<tblOrderDetail> tblOrderDetail { get; set; }
        public virtual DbSet<tblOrderDetailOption> tblOrderDetailOption { get; set; }
        public virtual DbSet<tblOrderDetailRecipe> tblOrderDetailRecipe { get; set; }
        public virtual DbSet<tblOrderDetailTemp> tblOrderDetailTemp { get; set; }
        public virtual DbSet<tblOrderStatus> tblOrderStatus { get; set; }
        public virtual DbSet<tblOrderTemp> tblOrderTemp { get; set; }
        public virtual DbSet<tblOrderType> tblOrderType { get; set; }
        public virtual DbSet<tblPackage> tblPackage { get; set; }
        public virtual DbSet<tblPaymentMode> tblPaymentMode { get; set; }
        public virtual DbSet<tblPeriod> tblPeriod { get; set; }
        public virtual DbSet<tblPosition> tblPosition { get; set; }
        public virtual DbSet<tblPrinterSetting> tblPrinterSetting { get; set; }
        public virtual DbSet<tblProduct> tblProduct { get; set; }
        public virtual DbSet<tblProductCategory> tblProductCategory { get; set; }
        public virtual DbSet<tblProductCategoryDetail> tblProductCategoryDetail { get; set; }
        public virtual DbSet<tblProductCategoryLocation> tblProductCategoryLocation { get; set; }
        public virtual DbSet<tblProductCategory_Temp> tblProductCategory_Temp { get; set; }
        public virtual DbSet<tblProductDamage> tblProductDamage { get; set; }
        public virtual DbSet<tblProductOrder> tblProductOrder { get; set; }
        public virtual DbSet<tblProductOrderByStatus> tblProductOrderByStatus { get; set; }
        public virtual DbSet<tblProductPortion> tblProductPortion { get; set; }
        public virtual DbSet<tblProductPrice> tblProductPrice { get; set; }
        public virtual DbSet<tblProductProtocol> tblProductProtocol { get; set; }
        public virtual DbSet<tblProductPurchase> tblProductPurchase { get; set; }
        public virtual DbSet<tblProductRecipe> tblProductRecipe { get; set; }
        public virtual DbSet<tblProductRecipeSelector> tblProductRecipeSelector { get; set; }
        public virtual DbSet<tblProductReportByShift> tblProductReportByShift { get; set; }
        public virtual DbSet<tblProductStock> tblProductStock { get; set; }
        public virtual DbSet<tblProductTransfer> tblProductTransfer { get; set; }
        public virtual DbSet<tblProfitAndLoss> tblProfitAndLoss { get; set; }
        public virtual DbSet<tblProfitLossTemp> tblProfitLossTemp { get; set; }
        public virtual DbSet<tblProfitOnSale> tblProfitOnSale { get; set; }
        public virtual DbSet<tblProtocolSetup> tblProtocolSetup { get; set; }
        public virtual DbSet<tblProtocolType> tblProtocolType { get; set; }
        public virtual DbSet<tblReason> tblReason { get; set; }
        public virtual DbSet<tblSelectEndOfShift> tblSelectEndOfShift { get; set; }
        public virtual DbSet<tblShift> tblShift { get; set; }
        public virtual DbSet<tblShiftDetail> tblShiftDetail { get; set; }
        public virtual DbSet<tblShiftProductStockTaking> tblShiftProductStockTaking { get; set; }
        public virtual DbSet<tblShiftReport> tblShiftReport { get; set; }
        public virtual DbSet<tblShiftReportByCategoryGroup> tblShiftReportByCategoryGroup { get; set; }
        public virtual DbSet<tblShiftReportByCategoryGroupTemp> tblShiftReportByCategoryGroupTemp { get; set; }
        public virtual DbSet<tblShiftReportDetail> tblShiftReportDetail { get; set; }
        public virtual DbSet<tblShiftReportTemp> tblShiftReportTemp { get; set; }
        public virtual DbSet<tblStatus> tblStatus { get; set; }
        public virtual DbSet<tblStock> tblStock { get; set; }
        public virtual DbSet<tblStockControl> tblStockControl { get; set; }
        public virtual DbSet<tblStockControlTemp> tblStockControlTemp { get; set; }
        public virtual DbSet<tblStockDamage> tblStockDamage { get; set; }
        public virtual DbSet<tblStockDamageDetail> tblStockDamageDetail { get; set; }
        public virtual DbSet<tblStockLevel> tblStockLevel { get; set; }
        public virtual DbSet<tblStockPurchase> tblStockPurchase { get; set; }
        public virtual DbSet<tblStockPurchaseDetail> tblStockPurchaseDetail { get; set; }
        public virtual DbSet<tblStockPurchasePayment> tblStockPurchasePayment { get; set; }
        public virtual DbSet<tblStockPurchaseReturn> tblStockPurchaseReturn { get; set; }
        public virtual DbSet<tblStockTransfer> tblStockTransfer { get; set; }
        public virtual DbSet<tblStockTransferDetail> tblStockTransferDetail { get; set; }
        public virtual DbSet<tblStockValue> tblStockValue { get; set; }
        public virtual DbSet<tblStockVariance> tblStockVariance { get; set; }
        public virtual DbSet<tblSupplier> tblSupplier { get; set; }
        public virtual DbSet<tblSupplierAccount> tblSupplierAccount { get; set; }
        public virtual DbSet<tblSupplierContactPerson> tblSupplierContactPerson { get; set; }
        public virtual DbSet<tblSupplierProduct> tblSupplierProduct { get; set; }
        public virtual DbSet<tblSupplierStatement> tblSupplierStatement { get; set; }
        public virtual DbSet<tblSupplierStatementTemp> tblSupplierStatementTemp { get; set; }
        public virtual DbSet<tblTable> tblTable { get; set; }
        public virtual DbSet<tblTableGroup> tblTableGroup { get; set; }
        public virtual DbSet<tblTaxDetail> tblTaxDetail { get; set; }
        public virtual DbSet<tblTitle> tblTitle { get; set; }
        public virtual DbSet<tblTransactionType> tblTransactionType { get; set; }
        public virtual DbSet<tblUser> tblUser { get; set; }
        public virtual DbSet<tblUserAction> tblUserAction { get; set; }
        public virtual DbSet<tblUserActivity> tblUserActivity { get; set; }
        public virtual DbSet<tblUserFeature> tblUserFeature { get; set; }
        public virtual DbSet<tblUserModule> tblUserModule { get; set; }
        public virtual DbSet<tblUserTable> tblUserTable { get; set; }
        public virtual DbSet<tblUserType> tblUserType { get; set; }
        public virtual DbSet<tblWaiter> tblWaiter { get; set; }
        public virtual DbSet<tblWaiterAccount> tblWaiterAccount { get; set; }
        public virtual DbSet<tblWaiterPayment> tblWaiterPayment { get; set; }
        public virtual DbSet<tblWaiterSalaryHistory> tblWaiterSalaryHistory { get; set; }
        public virtual DbSet<vwBankAccount> vwBankAccount { get; set; }
        public virtual DbSet<vwBankStatement> vwBankStatement { get; set; }
        public virtual DbSet<vwBankTransaction> vwBankTransaction { get; set; }
        public virtual DbSet<vwCashWithdrawal> vwCashWithdrawal { get; set; }
        public virtual DbSet<vwCompanyProfile> vwCompanyProfile { get; set; }
        public virtual DbSet<vwCreditSalePayment> vwCreditSalePayment { get; set; }
        public virtual DbSet<vwCustomerContactPerson> vwCustomerContactPerson { get; set; }
        public virtual DbSet<vwCustomerStatement> vwCustomerStatement { get; set; }
        public virtual DbSet<vwExpense> vwExpense { get; set; }
        public virtual DbSet<vwExpenseDetail> vwExpenseDetail { get; set; }
        public virtual DbSet<vwExpenseType> vwExpenseType { get; set; }
        public virtual DbSet<vwLocation> vwLocation { get; set; }
        public virtual DbSet<vwOption> vwOption { get; set; }
        public virtual DbSet<vwOrder> vwOrder { get; set; }
        public virtual DbSet<vwOrderActivity> vwOrderActivity { get; set; }
        public virtual DbSet<vwOrderActivityFromOA> vwOrderActivityFromOA { get; set; }
        public virtual DbSet<vwOrderDetail> vwOrderDetail { get; set; }
        public virtual DbSet<vwPrinterSetting> vwPrinterSetting { get; set; }
        public virtual DbSet<vwProduct> vwProduct { get; set; }
        public virtual DbSet<vwProductCategoryDetail> vwProductCategoryDetail { get; set; }
        public virtual DbSet<vwProductPrice> vwProductPrice { get; set; }
        public virtual DbSet<vwProductRecipe> vwProductRecipe { get; set; }
        public virtual DbSet<vwProductRecipeSelector> vwProductRecipeSelector { get; set; }
        public virtual DbSet<vwProductStock> vwProductStock { get; set; }
        public virtual DbSet<vwShift> vwShift { get; set; }
        public virtual DbSet<vwShiftProductStockTaking> vwShiftProductStockTaking { get; set; }
        public virtual DbSet<vwStockControl> vwStockControl { get; set; }
        public virtual DbSet<vwStockDamage> vwStockDamage { get; set; }
        public virtual DbSet<vwStockDamageDetail> vwStockDamageDetail { get; set; }
        public virtual DbSet<vwStockLevel> vwStockLevel { get; set; }
        public virtual DbSet<vwStockPurchase> vwStockPurchase { get; set; }
        public virtual DbSet<vwStockPurchaseDetail> vwStockPurchaseDetail { get; set; }
        public virtual DbSet<vwStockPurchasePayment> vwStockPurchasePayment { get; set; }
        public virtual DbSet<vwStockTransfer> vwStockTransfer { get; set; }
        public virtual DbSet<vwStockTransferDetail> vwStockTransferDetail { get; set; }
        public virtual DbSet<vwStockVariance> vwStockVariance { get; set; }
        public virtual DbSet<vwSupplier> vwSupplier { get; set; }
        public virtual DbSet<vwSupplierContactPerson> vwSupplierContactPerson { get; set; }
        public virtual DbSet<vwSupplierProduct> vwSupplierProduct { get; set; }
        public virtual DbSet<vwSupplierStatement> vwSupplierStatement { get; set; }
        public virtual DbSet<vwUserActivity> vwUserActivity { get; set; }
        public virtual DbSet<vwWaiterPayment> vwWaiterPayment { get; set; }

        public TheLuxeClubContext(DbContextOptions<TheLuxeClubContext> options) : base(options)
        {
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {

            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<tblAccountType>(entity =>
            {
                entity.HasIndex(e => e.AccountTypeName)
                    .HasName("chkUniqueAccountTypeName")
                    .IsUnique();
            });

            modelBuilder.Entity<tblAllStockValue>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<tblAllStockValueTemp>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<tblBank>(entity =>
            {
                entity.HasIndex(e => e.BankName)
                    .HasName("chkUniqueBankName")
                    .IsUnique();
            });

            modelBuilder.Entity<tblBankAccount>(entity =>
            {
                entity.HasIndex(e => new { e.BankID, e.AccountNo })
                    .HasName("chkUniqueBankAccount")
                    .IsUnique();

                entity.Property(e => e.CreatedDateTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OpeningDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<tblBankBranch>(entity =>
            {
                entity.HasIndex(e => new { e.BankBranchName, e.BankID })
                    .HasName("chkUniqueBankBranch")
                    .IsUnique();
            });

            modelBuilder.Entity<tblBankStatement>(entity =>
            {
                entity.Property(e => e.Balance).HasComputedColumnSql("([dbo].[ufnGetBankStatementBalance]([BankStatementID],[BankAccountID]))");
            });

            modelBuilder.Entity<tblBankStatementTemp>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.TransactionDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<tblBankTransaction>(entity =>
            {
                entity.Property(e => e.TransactionDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<tblBankTransactionType>(entity =>
            {
                entity.HasIndex(e => e.BankTransactionTypeName)
                    .HasName("chkUniqueBankTransactionTypeName")
                    .IsUnique();
            });

            modelBuilder.Entity<tblCashWithdrawal>(entity =>
            {
                entity.Property(e => e.CashWithdrawalDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<tblCategoryGroup>(entity =>
            {
                entity.HasIndex(e => e.CategoryGroupName)
                    .HasName("chkUniqueCategoryGroupName")
                    .IsUnique();
            });

            modelBuilder.Entity<tblCity>(entity =>
            {
                entity.HasIndex(e => new { e.CityName, e.CountryID })
                    .HasName("chkUniqueCity")
                    .IsUnique();
            });

            modelBuilder.Entity<tblCompanyLocation>(entity =>
            {
                entity.HasIndex(e => e.CompanyLocationName)
                    .HasName("chkUniqueCompanyLocationName")
                    .IsUnique();
            });

            modelBuilder.Entity<tblCompanyProfile>(entity =>
            {
                entity.Property(e => e.CanCashierOrder).HasDefaultValueSql("((1))");

                entity.Property(e => e.CanWaiterInvoice).HasDefaultValueSql("((1))");

                entity.Property(e => e.NoOfInvoiceToPrint).HasDefaultValueSql("((1))");

                entity.Property(e => e.NoOfOrderToPrint).HasDefaultValueSql("((1))");

                entity.Property(e => e.NoOfReceiptToPrint).HasDefaultValueSql("((1))");

                entity.Property(e => e.SelectTable).HasDefaultValueSql("((1))");

                entity.Property(e => e.SelectWaiter).HasDefaultValueSql("((1))");

                entity.Property(e => e.ShowVAT).HasDefaultValueSql("((1))");

                entity.Property(e => e.StockControl).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<tblCountry>(entity =>
            {
                entity.HasIndex(e => e.CountryName)
                    .HasName("chkUniqueCountryName")
                    .IsUnique();
            });

            modelBuilder.Entity<tblCreditSalePayment>(entity =>
            {
                entity.Property(e => e.PaymentDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<tblCurrency>(entity =>
            {
                entity.HasIndex(e => e.CurrencyName)
                    .HasName("chkUniqueCurrencyName")
                    .IsUnique();
            });

            modelBuilder.Entity<tblCurrencyRate>(entity =>
            {
                entity.HasKey(e => e.CurrencyRateID)
                    .HasName("PK_tblCurrencyDetail");

                entity.Property(e => e.CreatedDateTime).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<tblCustomer>(entity =>
            {
                entity.HasIndex(e => e.CustomerName)
                    .HasName("chkUniqueCustomerName")
                    .IsUnique();

                entity.Property(e => e.ApplyProtocolSetup).HasDefaultValueSql("((1))");

                entity.Property(e => e.CustomerNo)
                    .IsUnicode(false)
                    .HasComputedColumnSql("('C-'+CONVERT([varchar],[CustomerID],(0)))");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.RegistrationDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<tblCustomerAccount>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Balance).HasComputedColumnSql("(([OpeningBalance]+[AmountOwed])-[AmountPaid])");
            });

            modelBuilder.Entity<tblCustomerContactPerson>(entity =>
            {
                entity.HasIndex(e => new { e.ContactPersonName, e.CustomerID })
                    .HasName("chkUniqueCustomerContactPerson")
                    .IsUnique();
            });

            modelBuilder.Entity<tblCustomerStatement>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Balance).HasComputedColumnSql("([dbo].[ufnGetCustomerStatementBalance]([CustomerStatementID],[CustomerID]))");

                entity.Property(e => e.CustomerStatementID).ValueGeneratedOnAdd();

                entity.Property(e => e.TransactionDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<tblCustomerStatementTemp>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.TransactionDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<tblDailyStockLevel>(entity =>
            {
                entity.Property(e => e.StockLevelDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<tblDefaultProductPicture>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<tblEndOfShift>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<tblErrorLog>(entity =>
            {
                entity.Property(e => e.ErrorTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserName).HasDefaultValueSql("(suser_sname())");
            });

            modelBuilder.Entity<tblExpenditureTypeGroup>(entity =>
            {
                entity.HasIndex(e => e.ExpenditureTypeGroupCode)
                    .HasName("chkUniqueExpenditureTypeGroupCode")
                    .IsUnique();

                entity.HasIndex(e => e.ExpenditureTypeGroupName)
                    .HasName("chkUniqueExpenditureTypeGroupName")
                    .IsUnique();
            });

            modelBuilder.Entity<tblExpense>(entity =>
            {
                entity.Property(e => e.CreatedDateTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExpenseDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<tblExpenseDetail>(entity =>
            {
                entity.Property(e => e.ExpenseDetailTotal).HasComputedColumnSql("([Qty]*[CostPrice])");
            });

            modelBuilder.Entity<tblExpenseTypeGroup>(entity =>
            {
                entity.HasIndex(e => e.ExpenseTypeGroupCode)
                    .HasName("chkUniqueExpenseTypeGroupCode")
                    .IsUnique();

                entity.HasIndex(e => e.ExpenseTypeGroupName)
                    .HasName("chkUniqueExpenseTypeGroupName")
                    .IsUnique();
            });

            modelBuilder.Entity<tblFeature>(entity =>
            {
                entity.HasIndex(e => e.FeatureName)
                    .HasName("chkUniqueFeature")
                    .IsUnique();

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<tblGender>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.GenderName)
                    .HasName("chkUniqueGender")
                    .IsUnique();

                entity.Property(e => e.GenderID).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<tblLocation>(entity =>
            {
                entity.HasIndex(e => e.LocationName)
                    .HasName("chkUniqueLocationName")
                    .IsUnique();
            });

            modelBuilder.Entity<tblMailToSend>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<tblModule>(entity =>
            {
                entity.HasIndex(e => e.ModuleName)
                    .HasName("chkUniqueModule")
                    .IsUnique();
            });

            modelBuilder.Entity<tblMonthlyOrderSummaryReport>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<tblMonthlySaleReportByQty>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<tblMonthlySaleReportByValue>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<tblMostSoldProduct>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Profit).HasComputedColumnSql("([TotalAmount]-[TotalCostAmount])");
            });

            modelBuilder.Entity<tblOA>(entity =>
            {
                entity.Property(e => e.RemovedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TotalAmount).HasComputedColumnSql("([Qty]*[UnitPrice])");
            });

            modelBuilder.Entity<tblOAFK>(entity =>
            {
                entity.HasOne(d => d.OrderActivity)
                    .WithMany(p => p.tblOAFK)
                    .HasForeignKey(d => d.OrderActivityID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbl_tblOAFK");
            });

            modelBuilder.Entity<tblOption>(entity =>
            {
                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<tblOrder>(entity =>
            {
                entity.HasKey(e => e.OrderID)
                    .HasName("PK_tblOrder_1");

                entity.Property(e => e.IsServiceCharge).HasDefaultValueSql("((1))");

                entity.Property(e => e.OrderNo).HasComputedColumnSql("('O-'+CONVERT([nvarchar],[OrderID],(0)))");

                entity.Property(e => e.OrderTypeID).HasDefaultValueSql("((1))");

                entity.Property(e => e.OverAllTotal).HasComputedColumnSql("([NetTotal]+[ServiceCharge])");
            });

            modelBuilder.Entity<tblOrderActivity>(entity =>
            {
                entity.Property(e => e.RemovedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TotalAmount).HasComputedColumnSql("([Qty]*[UnitPrice])");
            });

            modelBuilder.Entity<tblOrderDetail>(entity =>
            {
                entity.HasKey(e => e.OrderDetailID)
                    .HasName("PK_tblOrderDetail_1");

                entity.Property(e => e.CreatedDatetime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NewlyInserted).HasDefaultValueSql("((1))");

                entity.Property(e => e.OrderDetailTotal).HasComputedColumnSql("([Qty]*[SellingPrice])");

                entity.Property(e => e.OrderDetailTotalCost).HasComputedColumnSql("([Qty]*[CostPrice])");

                entity.Property(e => e.OrderDetailTotalWithoutTax).HasComputedColumnSql("([Qty]*(([Qty]*[SellingPrice]-(([VAT]+[NHIL])+[TL]))/[Qty]))");

                entity.Property(e => e.SellingPriceWithoutTax).HasComputedColumnSql("(([Qty]*[SellingPrice]-(([VAT]+[NHIL])+[TL]))/[Qty])");
            });

            modelBuilder.Entity<tblOrderDetailRecipe>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.TotalCostPrice).HasComputedColumnSql("([Qty]*[CostPrice])");
            });

            modelBuilder.Entity<tblOrderDetailTemp>(entity =>
            {
                entity.HasKey(e => e.OrderDetailID)
                    .HasName("PK_tblOrderDetailTemp_1");

                entity.Property(e => e.CreatedDatetime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OrderDetailTotal).HasComputedColumnSql("([Qty]*[SellingPrice])");

                entity.Property(e => e.OrderDetailTotalCost).HasComputedColumnSql("([Qty]*[CostPrice])");

                entity.Property(e => e.OrderDetailTotalWithoutTax).HasComputedColumnSql("([Qty]*(([Qty]*[SellingPrice]-(([VAT]+[NHIL])+[TL]))/[Qty]))");

                entity.Property(e => e.SellingPriceWithoutTax).HasComputedColumnSql("(([Qty]*[SellingPrice]-(([VAT]+[NHIL])+[TL]))/[Qty])");
            });

            modelBuilder.Entity<tblOrderStatus>(entity =>
            {
                entity.HasIndex(e => e.OrderStatusName)
                    .HasName("chkUniqueOrderStatusName")
                    .IsUnique();
            });

            modelBuilder.Entity<tblOrderTemp>(entity =>
            {
                entity.HasKey(e => e.OrderID)
                    .HasName("PK_tblOrderTemp_1");

                entity.Property(e => e.OrderNo).HasComputedColumnSql("('O-'+CONVERT([nvarchar],[OrderID],(0)))");

                entity.Property(e => e.OrderTypeID).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<tblOrderType>(entity =>
            {
                entity.HasIndex(e => e.OrderTypeName)
                    .HasName("chkUniqueOrderTypeName")
                    .IsUnique();
            });

            modelBuilder.Entity<tblPackage>(entity =>
            {
                entity.HasIndex(e => e.PackageName)
                    .HasName("chkUniquePackageName")
                    .IsUnique();
            });

            modelBuilder.Entity<tblPaymentMode>(entity =>
            {
                entity.HasIndex(e => e.PaymentModeName)
                    .HasName("chkUniquePaymentModeName")
                    .IsUnique();
            });

            modelBuilder.Entity<tblPeriod>(entity =>
            {
                entity.HasIndex(e => e.PeriodName)
                    .HasName("chkUniquePeriodName")
                    .IsUnique();
            });

            modelBuilder.Entity<tblPosition>(entity =>
            {
                entity.HasIndex(e => e.PositionName)
                    .HasName("chkUniquePositionName")
                    .IsUnique();
            });

            modelBuilder.Entity<tblPrinterSetting>(entity =>
            {
                entity.HasIndex(e => new { e.ProductCategoryLocationID, e.ComputerLocationID, e.PrinterName })
                    .HasName("chkUniquePrinterSetting")
                    .IsUnique();
            });

            modelBuilder.Entity<tblProduct>(entity =>
            {
                entity.HasIndex(e => e.ProductName)
                    .HasName("chkUniqueProduct")
                    .IsUnique();

                entity.Property(e => e.AllowProtocol).HasDefaultValueSql("((1))");

                entity.Property(e => e.DateCreated).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DoesItHaveStock).HasDefaultValueSql("((1))");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.ProductCodeName).HasComputedColumnSql("(isnull(([ProductCode]+' ')+[ProductName],[ProductName]))");
            });

            modelBuilder.Entity<tblProductCategory>(entity =>
            {
                entity.HasIndex(e => e.CategoryName)
                    .HasName("chkUniqueCategoryName")
                    .IsUnique();
            });

            modelBuilder.Entity<tblProductCategoryDetail>(entity =>
            {
                entity.Property(e => e.ShowInMenu).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<tblProductCategoryLocation>(entity =>
            {
                entity.HasIndex(e => e.ProductCategoryLocationName)
                    .HasName("chkUniqueProductCategoryLocationName")
                    .IsUnique();
            });

            modelBuilder.Entity<tblProductCategory_Temp>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.CategoryName)
                    .HasName("chkUniqueCategoryName_Temp")
                    .IsUnique();
            });

            modelBuilder.Entity<tblProductDamage>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<tblProductOrder>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Profit).HasComputedColumnSql("([TotalAmount]-[TotalCostAmount])");
            });

            modelBuilder.Entity<tblProductOrderByStatus>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<tblProductPrice>(entity =>
            {
                entity.HasIndex(e => new { e.ProductID, e.PackageID, e.CompanyLocationID })
                    .HasName("chkUniqueProductPrice")
                    .IsUnique();

                entity.Property(e => e.DateCreated).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.QtyInPackage).HasDefaultValueSql("((1))");

                entity.Property(e => e.ShowInMenuList).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<tblProductProtocol>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<tblProductPurchase>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<tblProductRecipe>(entity =>
            {
                entity.Property(e => e.TotalCostPrice).HasComputedColumnSql("([CostPrice]*[Qty])");
            });

            modelBuilder.Entity<tblProductRecipeSelector>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.TotalCostPrice).HasComputedColumnSql("([CostPrice]*[Qty])");
            });

            modelBuilder.Entity<tblProductReportByShift>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Cash).HasDefaultValueSql("((0))");

                entity.Property(e => e.Credit).HasDefaultValueSql("((0))");

                entity.Property(e => e.Deleted).HasDefaultValueSql("((0))");

                entity.Property(e => e.Pending).HasDefaultValueSql("((0))");

                entity.Property(e => e.Protocol).HasDefaultValueSql("((0))");

                entity.Property(e => e.SellingPrice).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalQty).HasComputedColumnSql("((((isnull([Pending],(0))+isnull([Cash],(0)))+isnull([Credit],(0)))+isnull([Protocol],(0)))+isnull([Waiter],(0)))");

                entity.Property(e => e.Waiter).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<tblProductStock>(entity =>
            {
                entity.HasIndex(e => new { e.ProductID, e.CompanyLocationID })
                    .HasName("chkUniqueProductStock")
                    .IsUnique();

                entity.Property(e => e.CompanyLocationID).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<tblProductTransfer>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<tblProfitAndLoss>(entity =>
            {
                entity.Property(e => e.ProfitAndLoss).HasComputedColumnSql("([SaleTotal]-([DeliveryTotal]+[StockDamageTotal]))");

                entity.Property(e => e.StockOrderDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<tblProfitLossTemp>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<tblProfitOnSale>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Profit).HasComputedColumnSql("([TotalSellingPrice]-[TotalCostPrice])");
            });

            modelBuilder.Entity<tblProtocolSetup>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.DayName)
                    .HasName("chkUniqueProtocolSetup")
                    .IsUnique();

                entity.Property(e => e.ModifiedDateTime).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<tblSelectEndOfShift>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<tblShift>(entity =>
            {
                entity.Property(e => e.TimeRange)
                    .IsUnicode(false)
                    .HasComputedColumnSql("((('From '+CONVERT([varchar],[StartDateTime],(0)))+' To ')+isnull(CONVERT([varchar],[EndDateTime],(0)),' Now'))");
            });

            modelBuilder.Entity<tblShiftDetail>(entity =>
            {
                entity.Property(e => e.DollarTotal).HasComputedColumnSql("([DollarRate]*[DollarAmount])");

                entity.Property(e => e.EuroTotal).HasComputedColumnSql("([EuroRate]*[EuroAmount])");

                entity.Property(e => e.GHC10Amount).HasComputedColumnSql("([GHC10]*(10))");

                entity.Property(e => e.GHC20Amount).HasComputedColumnSql("([GHC20]*(20))");

                entity.Property(e => e.GHC2Amount).HasComputedColumnSql("([GHC2]*(2))");

                entity.Property(e => e.GHC50Amount).HasComputedColumnSql("([GHC50]*(50))");

                entity.Property(e => e.GHC5Amount).HasComputedColumnSql("([GHC5]*(5))");

                entity.Property(e => e.Momo).HasDefaultValueSql("((0))");

                entity.Property(e => e.PoundTotal).HasComputedColumnSql("([PoundRate]*[PoundAmount])");

                entity.Property(e => e._10GPAmount).HasComputedColumnSql("(([10GP]*(10))/(100))");

                entity.Property(e => e._1GPAmount).HasComputedColumnSql("([1GP]/(100))");

                entity.Property(e => e._20GPAmount).HasComputedColumnSql("(([20GP]*(20))/(100))");

                entity.Property(e => e._50GPAmount).HasComputedColumnSql("(([50GP]*(50))/(100))");

                entity.Property(e => e._5GPAmount).HasComputedColumnSql("(([5GP]*(5))/(100))");
            });

            modelBuilder.Entity<tblShiftProductStockTaking>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.ProductID, e.ShiftID, e.CompanyLocationID })
                    .HasName("chkUniqueShiftProductStockTakingProductID")
                    .IsUnique();
            });

            modelBuilder.Entity<tblShiftReport>(entity =>
            {
                entity.HasKey(e => e.ShiftReportID)
                    .HasName("PK_tblShiftReport_1");
            });

            modelBuilder.Entity<tblShiftReportByCategoryGroup>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CategoryGroupName).HasDefaultValueSql("((0))");

                entity.Property(e => e.TotalAmt).HasComputedColumnSql("(((([CashAmt]+[CreditAmt])+[ProtocolAmt])+[PendingAmt])+[WaiterTransferAmt])");

                entity.Property(e => e.TotalQty).HasComputedColumnSql("(((([CashQty]+[CreditQty])+[ProtocolQty])+[PendingQty])+[WaiterTransferQty])");
            });

            modelBuilder.Entity<tblShiftReportByCategoryGroupTemp>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<tblShiftReportDetail>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<tblShiftReportTemp>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<tblStock>(entity =>
            {
                entity.Property(e => e.StatusID).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<tblStockControl>(entity =>
            {
                entity.Property(e => e.Balance).HasComputedColumnSql("([dbo].[ufnGetStockControlBalance]([StockControlID],[ProductID]))");

                entity.Property(e => e.TransactionDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<tblStockControlTemp>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.TransactionDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<tblStockDamage>(entity =>
            {
                entity.Property(e => e.StockDamageNo)
                    .IsUnicode(false)
                    .HasComputedColumnSql("('SD-'+CONVERT([varchar],[StockDamageID],(0)))");
            });

            modelBuilder.Entity<tblStockDamageDetail>(entity =>
            {
                entity.Property(e => e.StockDamageDetailTotal).HasComputedColumnSql("([Qty]*[SellingPrice])");
            });

            modelBuilder.Entity<tblStockLevel>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.StockDifference).HasComputedColumnSql("([StartingStockLevel]-[ClosingStockLevel])");

                entity.Property(e => e.StockVariance).HasComputedColumnSql("([CorrectStock]-[ClosingStockLevel])");
            });

            modelBuilder.Entity<tblStockPurchase>(entity =>
            {
                entity.Property(e => e.NetTotal).HasComputedColumnSql("([StockPurchaseTotal]-[Discount])");

                entity.Property(e => e.StockPurchaseNo)
                    .IsUnicode(false)
                    .HasComputedColumnSql("('SP-'+CONVERT([varchar],[StockPurchaseID],(0)))");
            });

            modelBuilder.Entity<tblStockPurchaseDetail>(entity =>
            {
                entity.Property(e => e.StockPurchaseDetailTotal).HasComputedColumnSql("([Qty]*[CostPrice])");
            });

            modelBuilder.Entity<tblStockPurchasePayment>(entity =>
            {
                entity.Property(e => e.PaymentDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<tblStockPurchaseReturn>(entity =>
            {
                entity.Property(e => e.StockPurchaseDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<tblStockTransfer>(entity =>
            {
                entity.Property(e => e.StockTransferDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.StockTransferNo)
                    .IsUnicode(false)
                    .HasComputedColumnSql("('ST-'+CONVERT([varchar],[StockTransferID],(0)))");
            });

            modelBuilder.Entity<tblStockTransferDetail>(entity =>
            {
                entity.HasIndex(e => new { e.StockTransferID, e.ProductID })
                    .HasName("chkUniqueStockTransferDetail")
                    .IsUnique();

                entity.Property(e => e.StockTransferDetailTotal).HasComputedColumnSql("([Qty]*[SellingPrice])");
            });

            modelBuilder.Entity<tblStockValue>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.StockValueDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<tblStockVariance>(entity =>
            {
                entity.Property(e => e.StockDifference).HasComputedColumnSql("([CurrentStockLevel]-[StockLevelBefore])");

                entity.Property(e => e.StockVarianceDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<tblSupplier>(entity =>
            {
                entity.HasIndex(e => e.SupplierName)
                    .HasName("chkUniqueSupplierName")
                    .IsUnique();

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.RegistrationDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.SupplierNo)
                    .IsUnicode(false)
                    .HasComputedColumnSql("('S-'+CONVERT([varchar],[SupplierID],(0)))");
            });

            modelBuilder.Entity<tblSupplierAccount>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Balance).HasComputedColumnSql("(([OpeningBalance]+[AmountOwed])-[AmountPaid])");
            });

            modelBuilder.Entity<tblSupplierStatement>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Balance).HasComputedColumnSql("([dbo].[ufnGetSupplierStatementBalance]([SupplierStatementID],[SupplierID]))");

                entity.Property(e => e.SupplierStatementID).ValueGeneratedOnAdd();

                entity.Property(e => e.TransactionDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<tblSupplierStatementTemp>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.TransactionDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<tblTable>(entity =>
            {
                entity.HasIndex(e => e.TableNo)
                    .HasName("chkUniqueTableNo")
                    .IsUnique();

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.TableNo).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<tblTableGroup>(entity =>
            {
                entity.HasIndex(e => e.TableGroupName)
                    .HasName("chkUniqueTableGroupName")
                    .IsUnique();
            });

            modelBuilder.Entity<tblTaxDetail>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<tblTitle>(entity =>
            {
                entity.HasIndex(e => e.TitleName)
                    .HasName("chkUniqueTitle")
                    .IsUnique();
            });

            modelBuilder.Entity<tblUser>(entity =>
            {
                entity.HasKey(e => e.UserID)
                    .HasName("PK_tblUsers");

                entity.HasIndex(e => e.UserName)
                    .HasName("chkUniqueUserName")
                    .IsUnique();

                entity.Property(e => e.CreatedBy).HasDefaultValueSql("((1.))");

                entity.Property(e => e.CreatedDateTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<tblUserAction>(entity =>
            {
                entity.HasIndex(e => new { e.UserID, e.ActionID })
                    .HasName("chkUniqueUserAction")
                    .IsUnique();
            });

            modelBuilder.Entity<tblUserActivity>(entity =>
            {
                entity.Property(e => e.ActivityDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ReasonID).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<tblUserModule>(entity =>
            {
                entity.HasKey(e => e.UserModuleID)
                    .HasName("PK_tblUserModuleID");

                entity.HasIndex(e => new { e.UserID, e.ModuleID })
                    .HasName("chkUniqueUserModule")
                    .IsUnique();
            });

            modelBuilder.Entity<tblUserType>(entity =>
            {
                entity.HasIndex(e => e.UserTypeName)
                    .HasName("chkUniqueUserTypeName")
                    .IsUnique();
            });

            modelBuilder.Entity<tblWaiter>(entity =>
            {
                entity.HasIndex(e => e.WaiterName)
                    .HasName("chkUniqueWaiterName")
                    .IsUnique();

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<tblWaiterAccount>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Balance).HasComputedColumnSql("(([OpeningBalance]+[AmountOwed])-[AmountPaid])");

                entity.Property(e => e.WaiterName).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<tblWaiterPayment>(entity =>
            {
                entity.Property(e => e.PaymentDate).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<tblWaiterSalaryHistory>(entity =>
            {
                entity.HasKey(e => e.WaiterSalaryHistoryID)
                    .HasName("PK_tblWaiterHistory");

                entity.Property(e => e.CreatedDateTime).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<vwBankAccount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwBankAccount");
            });

            modelBuilder.Entity<vwBankStatement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwBankStatement");
            });

            modelBuilder.Entity<vwBankTransaction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwBankTransaction");
            });

            modelBuilder.Entity<vwCashWithdrawal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCashWithdrawal");
            });

            modelBuilder.Entity<vwCompanyProfile>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCompanyProfile");
            });

            modelBuilder.Entity<vwCreditSalePayment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCreditSalePayment");
            });

            modelBuilder.Entity<vwCustomerContactPerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCustomerContactPerson");
            });

            modelBuilder.Entity<vwCustomerStatement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwCustomerStatement");
            });

            modelBuilder.Entity<vwExpense>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwExpense");
            });

            modelBuilder.Entity<vwExpenseDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwExpenseDetail");
            });

            modelBuilder.Entity<vwExpenseType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwExpenseType");
            });

            modelBuilder.Entity<vwLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwLocation");

                entity.Property(e => e.LocationID).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<vwOption>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwOption");
            });

            modelBuilder.Entity<vwOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwOrder");

                entity.Property(e => e.CustomerNo).IsUnicode(false);

                entity.Property(e => e.TimeRange).IsUnicode(false);
            });

            modelBuilder.Entity<vwOrderActivity>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwOrderActivity");

                entity.Property(e => e.TimeRange).IsUnicode(false);
            });

            modelBuilder.Entity<vwOrderActivityFromOA>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwOrderActivityFromOA");

                entity.Property(e => e.TimeRange).IsUnicode(false);
            });

            modelBuilder.Entity<vwOrderDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwOrderDetail");
            });

            modelBuilder.Entity<vwPrinterSetting>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwPrinterSetting");
            });

            modelBuilder.Entity<vwProduct>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwProduct");
            });

            modelBuilder.Entity<vwProductCategoryDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwProductCategoryDetail");
            });

            modelBuilder.Entity<vwProductPrice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwProductPrice");
            });

            modelBuilder.Entity<vwProductRecipe>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwProductRecipe");
            });

            modelBuilder.Entity<vwProductRecipeSelector>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwProductRecipeSelector");
            });

            modelBuilder.Entity<vwProductStock>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwProductStock");
            });

            modelBuilder.Entity<vwShift>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwShift");

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.TimeRange).IsUnicode(false);
            });

            modelBuilder.Entity<vwShiftProductStockTaking>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwShiftProductStockTaking");
            });

            modelBuilder.Entity<vwStockControl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwStockControl");
            });

            modelBuilder.Entity<vwStockDamage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwStockDamage");

                entity.Property(e => e.StockDamageNo).IsUnicode(false);
            });

            modelBuilder.Entity<vwStockDamageDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwStockDamageDetail");
            });

            modelBuilder.Entity<vwStockLevel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwStockLevel");

                entity.Property(e => e.TimeRange).IsUnicode(false);
            });

            modelBuilder.Entity<vwStockPurchase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwStockPurchase");

                entity.Property(e => e.StockPurchaseNo).IsUnicode(false);

                entity.Property(e => e.SupplierNo).IsUnicode(false);
            });

            modelBuilder.Entity<vwStockPurchaseDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwStockPurchaseDetail");
            });

            modelBuilder.Entity<vwStockPurchasePayment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwStockPurchasePayment");
            });

            modelBuilder.Entity<vwStockTransfer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwStockTransfer");

                entity.Property(e => e.StockTransferNo).IsUnicode(false);
            });

            modelBuilder.Entity<vwStockTransferDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwStockTransferDetail");
            });

            modelBuilder.Entity<vwStockVariance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwStockVariance");
            });

            modelBuilder.Entity<vwSupplier>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSupplier");

                entity.Property(e => e.SupplierID).ValueGeneratedOnAdd();

                entity.Property(e => e.SupplierNo).IsUnicode(false);
            });

            modelBuilder.Entity<vwSupplierContactPerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSupplierContactPerson");
            });

            modelBuilder.Entity<vwSupplierProduct>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSupplierProduct");
            });

            modelBuilder.Entity<vwSupplierStatement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwSupplierStatement");
            });

            modelBuilder.Entity<vwUserActivity>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwUserActivity");
            });

            modelBuilder.Entity<vwWaiterPayment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vwWaiterPayment");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}